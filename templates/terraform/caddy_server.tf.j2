#jinja2: trim_blocks:False
resource "caddy_server_block" "caddy-{{ project_name }}" {
  filename = "{{ project_name }}.conf"

{%- set all_ports = containerapp__expose|getstackhead.stackhead.containerPorts(project_name) %}
  markers = {
    docker_ports = "{{ all_ports|map(attribute='tfstring')|join(',') }}"
  }
  markers_split = {
    docker_ports = ","
  }

  content = <<EOF
{% for domainConfig in app_config.domains %}
{%- for expose in domainConfig.expose if expose.external_port != 443 %}
{% set port_index = all_ports|selectattr('service', 'equalto', expose.service)|selectattr('internal_port', 'equalto', expose.internal_port)|map(attribute='index')|first %}

{{ domainConfig.domain }}{% if expose.external_port != 80 %}:{{ expose.external_port }}{% endif %} {
    reverse_proxy localhost:{~ docker_ports[{{ port_index }}] ~}
{%- if domainConfig.security.authentication is defined and domainConfig.security.authentication|selectattr("type", "equalto", "basic")|list | length > 0 %}
    basicauth * {
        {%- for item in domainConfig.security.authentication if item.type == 'basic' %}
        {{ item.username }} {{ item.password | password_hash('blowfish') | b64encode }}
        {%- endfor %}
    }
{%- endif %}
}
{%- endfor %}
{%- endfor %}
EOF

  depends_on = [
{% for expose in containerapp__expose if expose.external_port != 443 %}
{% if not loop.first %},{% endif %}docker_container.stackhead-{{ project_name }}-{{ expose.service }}
{% endfor %}
  ]

  provisioner "local-exec" {
    command = "caddy reload -config /etc/caddy/Caddyfile"
  }
  provisioner "local-exec" {
    when = destroy
    command = "caddy reload -config /etc/caddy/Caddyfile"
  }
}
